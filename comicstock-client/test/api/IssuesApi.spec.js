/**
 * ComicStock.WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ComicStockwebApi);
  }
}(this, function(expect, ComicStockwebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ComicStockwebApi.IssuesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IssuesApi', function() {
    describe('issuesAdd', function() {
      it('should call issuesAdd successfully', function(done) {
        //uncomment below and update the code to test issuesAdd
        //instance.issuesAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesAdd_0', function() {
      it('should call issuesAdd_0 successfully', function(done) {
        //uncomment below and update the code to test issuesAdd_0
        //instance.issuesAdd_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesDelete', function() {
      it('should call issuesDelete successfully', function(done) {
        //uncomment below and update the code to test issuesDelete
        //instance.issuesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesDelete_0', function() {
      it('should call issuesDelete_0 successfully', function(done) {
        //uncomment below and update the code to test issuesDelete_0
        //instance.issuesDelete_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesDelete_1', function() {
      it('should call issuesDelete_1 successfully', function(done) {
        //uncomment below and update the code to test issuesDelete_1
        //instance.issuesDelete_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesGet', function() {
      it('should call issuesGet successfully', function(done) {
        //uncomment below and update the code to test issuesGet
        //instance.issuesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesGetForSupplier', function() {
      it('should call issuesGetForSupplier successfully', function(done) {
        //uncomment below and update the code to test issuesGetForSupplier
        //instance.issuesGetForSupplier(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesGetForSupplier_0', function() {
      it('should call issuesGetForSupplier_0 successfully', function(done) {
        //uncomment below and update the code to test issuesGetForSupplier_0
        //instance.issuesGetForSupplier_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesGet_0', function() {
      it('should call issuesGet_0 successfully', function(done) {
        //uncomment below and update the code to test issuesGet_0
        //instance.issuesGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesGet_1', function() {
      it('should call issuesGet_1 successfully', function(done) {
        //uncomment below and update the code to test issuesGet_1
        //instance.issuesGet_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesGet_2', function() {
      it('should call issuesGet_2 successfully', function(done) {
        //uncomment below and update the code to test issuesGet_2
        //instance.issuesGet_2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesPost', function() {
      it('should call issuesPost successfully', function(done) {
        //uncomment below and update the code to test issuesPost
        //instance.issuesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesPost_0', function() {
      it('should call issuesPost_0 successfully', function(done) {
        //uncomment below and update the code to test issuesPost_0
        //instance.issuesPost_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesPost_1', function() {
      it('should call issuesPost_1 successfully', function(done) {
        //uncomment below and update the code to test issuesPost_1
        //instance.issuesPost_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesPut', function() {
      it('should call issuesPut successfully', function(done) {
        //uncomment below and update the code to test issuesPut
        //instance.issuesPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesPut_0', function() {
      it('should call issuesPut_0 successfully', function(done) {
        //uncomment below and update the code to test issuesPut_0
        //instance.issuesPut_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesPut_1', function() {
      it('should call issuesPut_1 successfully', function(done) {
        //uncomment below and update the code to test issuesPut_1
        //instance.issuesPut_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesRemove', function() {
      it('should call issuesRemove successfully', function(done) {
        //uncomment below and update the code to test issuesRemove
        //instance.issuesRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesRemove_0', function() {
      it('should call issuesRemove_0 successfully', function(done) {
        //uncomment below and update the code to test issuesRemove_0
        //instance.issuesRemove_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesRemove_1', function() {
      it('should call issuesRemove_1 successfully', function(done) {
        //uncomment below and update the code to test issuesRemove_1
        //instance.issuesRemove_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesReturn', function() {
      it('should call issuesReturn successfully', function(done) {
        //uncomment below and update the code to test issuesReturn
        //instance.issuesReturn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issuesReturn_0', function() {
      it('should call issuesReturn_0 successfully', function(done) {
        //uncomment below and update the code to test issuesReturn_0
        //instance.issuesReturn_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
