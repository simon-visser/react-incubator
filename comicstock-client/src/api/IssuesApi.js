/**
 * ComicStock.WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd && false) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IssueDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IssueDto'));
  } else {
    // Browser globals (root is window)
    if (!root.ComicStockwebApi) {
      root.ComicStockwebApi = {};
    }
    root.ComicStockwebApi.IssuesApi = factory(root.ComicStockwebApi.ApiClient, root.ComicStockwebApi.IssueDto);
  }
}(this, function(ApiClient, IssueDto) {
  'use strict';

  /**
   * Issues service.
   * @module api/IssuesApi
   * @version v1
   */

  /**
   * Constructs a new IssuesApi. 
   * @alias module:api/IssuesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the issuesAdd operation.
     * @callback module:api/IssuesApi~issuesAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} issueId 
     * @param {Number} conditionId 
     * @param {Number} quantity 
     * @param {String} stockId 
     * @param {module:api/IssuesApi~issuesAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesAdd = function(issueId, conditionId, quantity, stockId, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesAdd");
      }

      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling issuesAdd");
      }

      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling issuesAdd");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesAdd");
      }


      var pathParams = {
        'issueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
        'conditionId': conditionId,
        'quantity': quantity
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{issueId}/stock/{stockId}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesAdd_0 operation.
     * @callback module:api/IssuesApi~issuesAdd_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} issueId 
     * @param {Number} conditionId 
     * @param {Number} quantity 
     * @param {String} supplierId 
     * @param {module:api/IssuesApi~issuesAdd_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesAdd_0 = function(issueId, conditionId, quantity, supplierId, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesAdd_0");
      }

      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling issuesAdd_0");
      }

      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling issuesAdd_0");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesAdd_0");
      }


      var pathParams = {
        'issueId': issueId,
        'supplierId': supplierId
      };
      var queryParams = {
        'conditionId': conditionId,
        'quantity': quantity
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesDelete operation.
     * @callback module:api/IssuesApi~issuesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/IssuesApi~issuesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesDelete_0 operation.
     * @callback module:api/IssuesApi~issuesDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/IssuesApi~issuesDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesDelete_0 = function(id, issueId, stockId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuesDelete_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesDelete_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesDelete_0");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{IssueId}/stock/{stockId}/Delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesDelete_1 operation.
     * @callback module:api/IssuesApi~issuesDelete_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/IssuesApi~issuesDelete_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesDelete_1 = function(id, supplierId, issueId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuesDelete_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesDelete_1");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesDelete_1");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/Delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGet operation.
     * @callback module:api/IssuesApi~issuesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/IssuesApi~issuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueDto>}
     */
    this.issuesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [IssueDto];

      return this.apiClient.callApi(
        '/api/Issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetForSupplier operation.
     * @callback module:api/IssuesApi~issuesGetForSupplierCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} supplierId 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/IssuesApi~issuesGetForSupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueDto>}
     */
    this.issuesGetForSupplier = function(supplierId, issueId, stockId, callback) {
      var postBody = null;

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesGetForSupplier");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesGetForSupplier");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesGetForSupplier");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
        'supplierId': supplierId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [IssueDto];

      return this.apiClient.callApi(
        '/api/Issues/{IssueId}/stock/{stockId}/GetForSupplier', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetForSupplier_0 operation.
     * @callback module:api/IssuesApi~issuesGetForSupplier_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} supplierId 
     * @param {String} issueId 
     * @param {module:api/IssuesApi~issuesGetForSupplier_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueDto>}
     */
    this.issuesGetForSupplier_0 = function(supplierId, issueId, callback) {
      var postBody = null;

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesGetForSupplier_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesGetForSupplier_0");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [IssueDto];

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/GetForSupplier', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGet_0 operation.
     * @callback module:api/IssuesApi~issuesGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/IssuesApi~issuesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDto}
     */
    this.issuesGet_0 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuesGet_0");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = IssueDto;

      return this.apiClient.callApi(
        '/api/Issues/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGet_1 operation.
     * @callback module:api/IssuesApi~issuesGet_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/IssuesApi~issuesGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueDto>}
     */
    this.issuesGet_1 = function(issueId, stockId, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesGet_1");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesGet_1");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [IssueDto];

      return this.apiClient.callApi(
        '/api/Issues/{IssueId}/stock/{stockId}/Get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGet_2 operation.
     * @callback module:api/IssuesApi~issuesGet_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/IssuesApi~issuesGet_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueDto>}
     */
    this.issuesGet_2 = function(supplierId, issueId, callback) {
      var postBody = null;

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesGet_2");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesGet_2");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [IssueDto];

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/Get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesPost operation.
     * @callback module:api/IssuesApi~issuesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IssueDto} issue 
     * @param {module:api/IssuesApi~issuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDto}
     */
    this.issuesPost = function(issue, callback) {
      var postBody = issue;

      // verify the required parameter 'issue' is set
      if (issue === undefined || issue === null) {
        throw new Error("Missing the required parameter 'issue' when calling issuesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = IssueDto;

      return this.apiClient.callApi(
        '/api/Issues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesPost_0 operation.
     * @callback module:api/IssuesApi~issuesPost_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IssueDto} issue 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/IssuesApi~issuesPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDto}
     */
    this.issuesPost_0 = function(issue, issueId, stockId, callback) {
      var postBody = issue;

      // verify the required parameter 'issue' is set
      if (issue === undefined || issue === null) {
        throw new Error("Missing the required parameter 'issue' when calling issuesPost_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesPost_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesPost_0");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = IssueDto;

      return this.apiClient.callApi(
        '/api/Issues/{IssueId}/stock/{stockId}/Post', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesPost_1 operation.
     * @callback module:api/IssuesApi~issuesPost_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IssueDto} issue 
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/IssuesApi~issuesPost_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDto}
     */
    this.issuesPost_1 = function(issue, supplierId, issueId, callback) {
      var postBody = issue;

      // verify the required parameter 'issue' is set
      if (issue === undefined || issue === null) {
        throw new Error("Missing the required parameter 'issue' when calling issuesPost_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesPost_1");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesPost_1");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = IssueDto;

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/Post', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesPut operation.
     * @callback module:api/IssuesApi~issuesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IssueDto} issue 
     * @param {module:api/IssuesApi~issuesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDto}
     */
    this.issuesPut = function(issue, callback) {
      var postBody = issue;

      // verify the required parameter 'issue' is set
      if (issue === undefined || issue === null) {
        throw new Error("Missing the required parameter 'issue' when calling issuesPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = IssueDto;

      return this.apiClient.callApi(
        '/api/Issues', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesPut_0 operation.
     * @callback module:api/IssuesApi~issuesPut_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IssueDto} issue 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/IssuesApi~issuesPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDto}
     */
    this.issuesPut_0 = function(issue, issueId, stockId, callback) {
      var postBody = issue;

      // verify the required parameter 'issue' is set
      if (issue === undefined || issue === null) {
        throw new Error("Missing the required parameter 'issue' when calling issuesPut_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesPut_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesPut_0");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = IssueDto;

      return this.apiClient.callApi(
        '/api/Issues/{IssueId}/stock/{stockId}/Put', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesPut_1 operation.
     * @callback module:api/IssuesApi~issuesPut_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IssueDto} issue 
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/IssuesApi~issuesPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueDto}
     */
    this.issuesPut_1 = function(issue, supplierId, issueId, callback) {
      var postBody = issue;

      // verify the required parameter 'issue' is set
      if (issue === undefined || issue === null) {
        throw new Error("Missing the required parameter 'issue' when calling issuesPut_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesPut_1");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesPut_1");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = IssueDto;

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/Put', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesRemove operation.
     * @callback module:api/IssuesApi~issuesRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} issueId 
     * @param {Number} stockId 
     * @param {Number} quantity 
     * @param {module:api/IssuesApi~issuesRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesRemove = function(issueId, stockId, quantity, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesRemove");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesRemove");
      }

      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling issuesRemove");
      }


      var pathParams = {
      };
      var queryParams = {
        'issueId': issueId,
        'stockId': stockId,
        'quantity': quantity
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesRemove_0 operation.
     * @callback module:api/IssuesApi~issuesRemove_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} issueId 
     * @param {Number} stockId 
     * @param {Number} quantity 
     * @param {module:api/IssuesApi~issuesRemove_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesRemove_0 = function(issueId, stockId, quantity, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesRemove_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesRemove_0");
      }

      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling issuesRemove_0");
      }


      var pathParams = {
        'issueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
        'quantity': quantity
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{issueId}/stock/{stockId}/remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesRemove_1 operation.
     * @callback module:api/IssuesApi~issuesRemove_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} issueId 
     * @param {Number} stockId 
     * @param {Number} quantity 
     * @param {String} supplierId 
     * @param {module:api/IssuesApi~issuesRemove_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesRemove_1 = function(issueId, stockId, quantity, supplierId, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesRemove_1");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesRemove_1");
      }

      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling issuesRemove_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesRemove_1");
      }


      var pathParams = {
        'issueId': issueId,
        'supplierId': supplierId
      };
      var queryParams = {
        'stockId': stockId,
        'quantity': quantity
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesReturn operation.
     * @callback module:api/IssuesApi~issuesReturnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} issueId 
     * @param {Number} conditionId 
     * @param {Number} quantity 
     * @param {String} stockId 
     * @param {module:api/IssuesApi~issuesReturnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesReturn = function(issueId, conditionId, quantity, stockId, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesReturn");
      }

      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling issuesReturn");
      }

      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling issuesReturn");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling issuesReturn");
      }


      var pathParams = {
        'issueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
        'conditionId': conditionId,
        'quantity': quantity
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{issueId}/stock/{stockId}/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesReturn_0 operation.
     * @callback module:api/IssuesApi~issuesReturn_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} issueId 
     * @param {Number} conditionId 
     * @param {Number} quantity 
     * @param {String} supplierId 
     * @param {module:api/IssuesApi~issuesReturn_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesReturn_0 = function(issueId, conditionId, quantity, supplierId, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling issuesReturn_0");
      }

      // verify the required parameter 'conditionId' is set
      if (conditionId === undefined || conditionId === null) {
        throw new Error("Missing the required parameter 'conditionId' when calling issuesReturn_0");
      }

      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling issuesReturn_0");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling issuesReturn_0");
      }


      var pathParams = {
        'issueId': issueId,
        'supplierId': supplierId
      };
      var queryParams = {
        'conditionId': conditionId,
        'quantity': quantity
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Issues/{supplierId}/issues/{issueId}/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
