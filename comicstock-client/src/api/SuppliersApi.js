/**
 * ComicStock.WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd && false) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OrderStockResponse', 'model/QualityInput', 'model/SupplierDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/OrderStockResponse'), require('../model/QualityInput'), require('../model/SupplierDto'));
  } else {
    // Browser globals (root is window)
    if (!root.ComicStockwebApi) {
      root.ComicStockwebApi = {};
    }
    root.ComicStockwebApi.SuppliersApi = factory(root.ComicStockwebApi.ApiClient, root.ComicStockwebApi.OrderStockResponse, root.ComicStockwebApi.QualityInput, root.ComicStockwebApi.SupplierDto);
  }
}(this, function(ApiClient, OrderStockResponse, QualityInput, SupplierDto) {
  'use strict';

  /**
   * Suppliers service.
   * @module api/SuppliersApi
   * @version v1
   */

  /**
   * Constructs a new SuppliersApi. 
   * @alias module:api/SuppliersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the suppliersDelete operation.
     * @callback module:api/SuppliersApi~suppliersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SuppliersApi~suppliersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.suppliersDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suppliersDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Suppliers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersDelete_0 operation.
     * @callback module:api/SuppliersApi~suppliersDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/SuppliersApi~suppliersDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.suppliersDelete_0 = function(id, issueId, stockId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suppliersDelete_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersDelete_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling suppliersDelete_0");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Suppliers/{IssueId}/stock/{stockId}/Delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersDelete_1 operation.
     * @callback module:api/SuppliersApi~suppliersDelete_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/SuppliersApi~suppliersDelete_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.suppliersDelete_1 = function(id, supplierId, issueId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suppliersDelete_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling suppliersDelete_1");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersDelete_1");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Suppliers/{supplierId}/issues/{issueId}/Delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGet operation.
     * @callback module:api/SuppliersApi~suppliersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplierDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SuppliersApi~suppliersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplierDto>}
     */
    this.suppliersGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [SupplierDto];

      return this.apiClient.callApi(
        '/api/Suppliers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGet_0 operation.
     * @callback module:api/SuppliersApi~suppliersGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SuppliersApi~suppliersGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersGet_0 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suppliersGet_0");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGet_1 operation.
     * @callback module:api/SuppliersApi~suppliersGet_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplierDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/SuppliersApi~suppliersGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplierDto>}
     */
    this.suppliersGet_1 = function(issueId, stockId, callback) {
      var postBody = null;

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersGet_1");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling suppliersGet_1");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [SupplierDto];

      return this.apiClient.callApi(
        '/api/Suppliers/{IssueId}/stock/{stockId}/Get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGet_2 operation.
     * @callback module:api/SuppliersApi~suppliersGet_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplierDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/SuppliersApi~suppliersGet_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplierDto>}
     */
    this.suppliersGet_2 = function(supplierId, issueId, callback) {
      var postBody = null;

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling suppliersGet_2");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersGet_2");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = [SupplierDto];

      return this.apiClient.callApi(
        '/api/Suppliers/{supplierId}/issues/{issueId}/Get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersOrder operation.
     * @callback module:api/SuppliersApi~suppliersOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStockResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} supplierId 
     * @param {Number} issueId 
     * @param {module:model/QualityInput} qualityInput 
     * @param {String} stockId 
     * @param {module:api/SuppliersApi~suppliersOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStockResponse}
     */
    this.suppliersOrder = function(supplierId, issueId, qualityInput, stockId, callback) {
      var postBody = qualityInput;

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling suppliersOrder");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersOrder");
      }

      // verify the required parameter 'qualityInput' is set
      if (qualityInput === undefined || qualityInput === null) {
        throw new Error("Missing the required parameter 'qualityInput' when calling suppliersOrder");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling suppliersOrder");
      }


      var pathParams = {
        'issueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
        'supplierId': supplierId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json'];
      var returnType = OrderStockResponse;

      return this.apiClient.callApi(
        '/api/Suppliers/{issueId}/stock/{stockId}/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersOrder_0 operation.
     * @callback module:api/SuppliersApi~suppliersOrder_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStockResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} supplierId 
     * @param {Number} issueId 
     * @param {module:model/QualityInput} qualityInput 
     * @param {module:api/SuppliersApi~suppliersOrder_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStockResponse}
     */
    this.suppliersOrder_0 = function(supplierId, issueId, qualityInput, callback) {
      var postBody = qualityInput;

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling suppliersOrder_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersOrder_0");
      }

      // verify the required parameter 'qualityInput' is set
      if (qualityInput === undefined || qualityInput === null) {
        throw new Error("Missing the required parameter 'qualityInput' when calling suppliersOrder_0");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json'];
      var returnType = OrderStockResponse;

      return this.apiClient.callApi(
        '/api/Suppliers/{supplierId}/issues/{issueId}/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPatch operation.
     * @callback module:api/SuppliersApi~suppliersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {module:api/SuppliersApi~suppliersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPatch = function(supplier, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPatch_0 operation.
     * @callback module:api/SuppliersApi~suppliersPatch_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/SuppliersApi~suppliersPatch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPatch_0 = function(supplier, issueId, stockId, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPatch_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersPatch_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling suppliersPatch_0");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers/{IssueId}/stock/{stockId}/Patch', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPatch_1 operation.
     * @callback module:api/SuppliersApi~suppliersPatch_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/SuppliersApi~suppliersPatch_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPatch_1 = function(supplier, supplierId, issueId, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPatch_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling suppliersPatch_1");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersPatch_1");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers/{supplierId}/issues/{issueId}/Patch', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPost operation.
     * @callback module:api/SuppliersApi~suppliersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {module:api/SuppliersApi~suppliersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPost = function(supplier, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPost_0 operation.
     * @callback module:api/SuppliersApi~suppliersPost_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/SuppliersApi~suppliersPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPost_0 = function(supplier, issueId, stockId, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPost_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersPost_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling suppliersPost_0");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers/{IssueId}/stock/{stockId}/Post', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPost_1 operation.
     * @callback module:api/SuppliersApi~suppliersPost_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/SuppliersApi~suppliersPost_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPost_1 = function(supplier, supplierId, issueId, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPost_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling suppliersPost_1");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersPost_1");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers/{supplierId}/issues/{issueId}/Post', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPut operation.
     * @callback module:api/SuppliersApi~suppliersPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {module:api/SuppliersApi~suppliersPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPut = function(supplier, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPut_0 operation.
     * @callback module:api/SuppliersApi~suppliersPut_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {String} issueId 
     * @param {String} stockId 
     * @param {module:api/SuppliersApi~suppliersPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPut_0 = function(supplier, issueId, stockId, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPut_0");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersPut_0");
      }

      // verify the required parameter 'stockId' is set
      if (stockId === undefined || stockId === null) {
        throw new Error("Missing the required parameter 'stockId' when calling suppliersPut_0");
      }


      var pathParams = {
        'IssueId': issueId,
        'stockId': stockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers/{IssueId}/stock/{stockId}/Put', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPut_1 operation.
     * @callback module:api/SuppliersApi~suppliersPut_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SupplierDto} supplier 
     * @param {String} supplierId 
     * @param {String} issueId 
     * @param {module:api/SuppliersApi~suppliersPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    this.suppliersPut_1 = function(supplier, supplierId, issueId, callback) {
      var postBody = supplier;

      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling suppliersPut_1");
      }

      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling suppliersPut_1");
      }

      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling suppliersPut_1");
      }


      var pathParams = {
        'supplierId': supplierId,
        'issueId': issueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/vnd.api+json', 'application/xml', 'text/xml'];
      var returnType = SupplierDto;

      return this.apiClient.callApi(
        '/api/Suppliers/{supplierId}/issues/{issueId}/Put', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
